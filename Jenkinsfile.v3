def commit_id
pipeline {
    agent any
    environment {
        //Use Pipeline Utility Steps plugin to read information from pom.xml into env variables
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
    }
    stages {
        stage('Preparation') {
            steps {
                checkout scm
                sh 'git rev-parse --short HEAD > .git/commit-id'
                script {
                    commit_id = readFile('.git/commit-id').trim()
                }
                sh 'chmod +x mvnw'
            }
        }
        stage ('Compile Stage') {
            steps {
                sh'./mvnw clean compile'
            }
        }
        stage ('Testing Stage') {
            steps {
                sh'./mvnw test'
            }
        }
        stage ('Install Stage') {
            steps {
                sh'./mvnw install'
            }
        }
        stage ('Build/Publish') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker') {
                        // docker.build("gagandeep39/spring-jenkins-demo:${commit_id}", '.').push()
                        docker.build("gagandeep39/spring-jenkins-demo:${VERSION}", '.').push()
                    }
                }
            }
        }
        stage ('Deploy on this Server') {
            steps {
                script {
                    sh 'docker stop spring-jenkins-demo || echo Container is not on'
                    sh 'docker container rm -f spring-jenkins-demo || echo Container doesnt exists'
                    docker.image('gagandeep39/spring-jenkins-demo:' + VERSION).run('-p 8081:8081 --name spring-jenkins-demo')
                    sh 'docker image prune -f'
                }
            }
        }
    }
}
